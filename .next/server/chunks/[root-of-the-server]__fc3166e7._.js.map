{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.ts"],"sourcesContent":["\nimport {\n  TrendingUp,\n  ShieldCheck,\n  Scaling,\n  Cpu,\n  Landmark,\n} from \"lucide-react\";\nimport type { Pillar, SubItem, ExcelData, MonthlyExcelData, ValueMapData } from \"@/types\";\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\n// Hardcoded icons mapping\nconst pillarIcons: { [key: string]: Pillar['icon'] } = {\n  'improving-productivity': TrendingUp,\n  'building-reliable-products': ShieldCheck,\n  'making-design-resilient': Scaling,\n  'adopting-emerging-technologies': Cpu,\n  'world-class-corporate-governance': Landmark,\n};\n\nconst dataFilePath = (filename: string) => path.join(process.cwd(), 'src', 'lib', filename);\nconst monthlyDataDirectoryPath = (dir: string) => path.join(process.cwd(), 'src', 'lib', dir);\n\n\nasync function readData(): Promise<Pillar[]> {\n  try {\n    const fileContent = await fs.readFile(dataFilePath('data.json'), 'utf-8');\n    let jsonData: Omit<Pillar, 'icon'>[] = JSON.parse(fileContent);\n\n    const autoCalculatedKeys = [\n        'tech-sphere-sessions', 'arc-trainings', 'app-sherpas', \n        'explore-resiliency-program', 'dti-tech-blogs', 'hackathons', \n        'industry-events', 'squad-onboarding', 'regression-testing-automation',\n        'junit-adoption', 'maintenance-screens', 'api-performance'\n    ];\n\n    const dataCache: Record<string, ExcelData | null> = {};\n\n    for (const key of autoCalculatedKeys) {\n        dataCache[key] = await readExcelData(key);\n    }\n    \n    // Attach total participants for tech sphere sessions\n    const techSessionsData = dataCache['tech-sphere-sessions'];\n    if (techSessionsData && techSessionsData.rows.length > 0) {\n      const totalParticipants = techSessionsData.rows.reduce((sum, row) => sum + (Number(row['Participation']) || 0), 0);\n      jsonData = jsonData.map(pillar => ({\n        ...pillar,\n        subItems: pillar.subItems.map(subItem => \n            subItem.dataKey === 'tech-sphere-sessions' \n            ? { ...subItem, totalParticipants } \n            : subItem\n        ),\n      }));\n    }\n\n    // Attach total participants and session count for ARC trainings\n    const arcTrainingsData = dataCache['arc-trainings'];\n    if (arcTrainingsData && arcTrainingsData.rows.length > 0) {\n        const totalParticipants = arcTrainingsData.rows.reduce((sum, row) => sum + (Number(row['Participation']) || 0), 0);\n        const sessionsCount = arcTrainingsData.rows.length;\n        jsonData = jsonData.map(pillar => ({\n            ...pillar,\n            subItems: pillar.subItems.map(subItem => \n                subItem.dataKey === 'arc-trainings' \n                ? { ...subItem, totalParticipants, percentageComplete: sessionsCount } \n                : subItem\n            ),\n        }));\n    }\n\n    // Attach App Sherpas count\n    const appSherpasData = dataCache['app-sherpas'];\n    if (appSherpasData && appSherpasData.rows.length > 0) {\n        const sherpasCount = appSherpasData.rows.length;\n        jsonData = jsonData.map(pillar => ({\n            ...pillar,\n            subItems: pillar.subItems.map(subItem => \n                subItem.dataKey === 'app-sherpas' \n                ? { ...subItem, percentageComplete: sherpasCount } \n                : subItem\n            ),\n        }));\n    }\n    \n    // Attach completed assessment count for Explore Resiliency Program\n    const resiliencyData = dataCache['explore-resiliency-program'];\n    if (resiliencyData && resiliencyData.rows.length > 0) {\n        const completedAssessments = resiliencyData.rows.filter(row => row['Status'] === 'Assessment Completed').length;\n        jsonData = jsonData.map(pillar => ({\n            ...pillar,\n            subItems: pillar.subItems.map(subItem => \n                subItem.dataKey === 'explore-resiliency-program' \n                ? { ...subItem, percentageComplete: completedAssessments } \n                : subItem\n            ),\n        }));\n    }\n\n    // Attach published blogs count for DTI Tech Blogs\n    const blogsData = dataCache['dti-tech-blogs'];\n    if (blogsData) { // Check if blogsData is not null\n        const publishedBlogs = blogsData.rows.length;\n        jsonData = jsonData.map(pillar => ({\n            ...pillar,\n            subItems: pillar.subItems.map(subItem => \n                subItem.dataKey === 'dti-tech-blogs' \n                ? { ...subItem, percentageComplete: publishedBlogs } \n                : subItem\n            ),\n        }));\n    }\n\n    // Attach hackathons count\n    const hackathonsData = dataCache['hackathons'];\n    if (hackathonsData && hackathonsData.rows.length > 0) {\n        const hackathonsCount = hackathonsData.rows.length;\n        jsonData = jsonData.map(pillar => ({\n            ...pillar,\n            subItems: pillar.subItems.map(subItem => \n                subItem.dataKey === 'hackathons' \n                ? { ...subItem, percentageComplete: hackathonsCount } \n                : subItem\n            ),\n        }));\n    }\n\n     // Attach industry events count\n    const industryEventsData = dataCache['industry-events'];\n    if (industryEventsData && industryEventsData.rows.length > 0) {\n        const industryEventsCount = industryEventsData.rows.length;\n        jsonData = jsonData.map(pillar => ({\n            ...pillar,\n            subItems: pillar.subItems.map(subItem => \n                subItem.dataKey === 'industry-events' \n                ? { ...subItem, percentageComplete: industryEventsCount } \n                : subItem\n            ),\n        }));\n    }\n    \n    // Attach SQUAD onboarding count\n    const squadData = dataCache['squad-onboarding'];\n    if (squadData && squadData.rows.length > 0) {\n        const onboardedCount = squadData.rows.length;\n        jsonData = jsonData.map(pillar => ({\n            ...pillar,\n            subItems: pillar.subItems.map(subItem => \n                subItem.dataKey === 'squad-onboarding' \n                ? { ...subItem, percentageComplete: onboardedCount } \n                : subItem\n            ),\n        }));\n    }\n\n    // Attach row counts for 'Building Reliable Products' sub-items (except Maintenance Screens)\n    const newAutoCalcKeys = ['regression-testing-automation', 'junit-adoption', 'api-performance'];\n    for (const key of newAutoCalcKeys) {\n        const data = dataCache[key];\n        if (data && data.rows.length > 0) {\n            const rowCount = data.rows.length;\n            jsonData = jsonData.map(pillar => ({\n                ...pillar,\n                subItems: pillar.subItems.map(subItem => \n                    subItem.dataKey === key \n                    ? { ...subItem, percentageComplete: rowCount } \n                    : subItem\n                ),\n            }));\n        }\n    }\n    \n    // Attach implemented screens count for Maintenance Screens\n    const maintenanceScreensData = dataCache['maintenance-screens'];\n    if (maintenanceScreensData && maintenanceScreensData.rows.length > 0) {\n        const implementedScreens = maintenanceScreensData.rows.filter(row => String(row['Status'] || '').toLowerCase().includes('live')).length;\n        jsonData = jsonData.map(pillar => ({\n            ...pillar,\n            subItems: pillar.subItems.map(subItem => \n                subItem.dataKey === 'maintenance-screens' \n                ? { ...subItem, percentageComplete: implementedScreens } \n                : subItem\n            ),\n        }));\n    }\n\n\n    // Attach Jira Assistant Adoption data\n    const jiraAdoptionData = await readMonthlyData('jira-assistant-adoption');\n    if (jiraAdoptionData && Object.keys(jiraAdoptionData).length > 0) {\n        const latestMonth = Object.keys(jiraAdoptionData).sort().pop();\n        \n        let latestMonthAdoption = 0;\n        if (latestMonth && jiraAdoptionData[latestMonth]) {\n            const latestMonthRows = jiraAdoptionData[latestMonth].rows;\n            const testCases = latestMonthRows.filter(row => row['issue_type'] === 'Test');\n            const totalTestCases = testCases.length;\n            const jaTestCases = testCases.filter(row => row['is_created_via_JA'] === 1).length;\n            \n            if (totalTestCases > 0) {\n                latestMonthAdoption = Math.round((jaTestCases / totalTestCases) * 100);\n            }\n        }\n        \n        jsonData = jsonData.map(pillar => ({\n            ...pillar,\n            subItems: pillar.subItems.map(subItem => \n                subItem.dataKey === 'jira-assistant-adoption' \n                ? { ...subItem, percentageComplete: latestMonthAdoption, metricName: `Latest Month Test Case Adoption` } \n                : subItem\n            ),\n        }));\n    }\n\n\n    // Attach icons back to the data\n    return jsonData.map(pillar => ({\n      ...pillar,\n      icon: pillarIcons[pillar.id] || Landmark, // Fallback icon\n    }));\n  } catch (error) {\n    console.error(\"Could not read or parse data.json:\", error);\n    // Fallback to empty array or some default structure if file read fails\n    return [];\n  }\n}\n\nexport async function getPillars(): Promise<Pillar[]> {\n  return await readData();\n}\n\nexport async function getPillarById(id: string): Promise<Pillar | undefined> {\n  const pillars = await readData();\n  return pillars.find((p) => p.id === id);\n}\n\nexport async function writeData(data: Pillar[]) {\n    try {\n        // We need to remove the icon and other dynamic properties before writing to JSON\n        const dataToWrite = data.map(({ icon, ...rest }) => {\n          rest.subItems = rest.subItems.map(({ totalParticipants, ...subRest }) => subRest);\n          return rest;\n        });\n        await fs.writeFile(dataFilePath('data.json'), JSON.stringify(dataToWrite, null, 2), 'utf-8');\n    } catch (error) {\n        console.error(\"Could not write to data.json:\", error);\n        throw new Error(\"Failed to save data.\");\n    }\n}\n\nexport async function readExcelData(fileKey: string): Promise<ExcelData | null> {\n    try {\n        const fileContent = await fs.readFile(dataFilePath(`${fileKey}.json`), 'utf-8');\n        // A bit of a hack: if it's hackathons.json, it's not ExcelData format but Hackathon[]\n        if (fileKey === 'hackathons' || fileKey === 'industry-events') {\n          const data = JSON.parse(fileContent);\n          return { headers: [], rows: data };\n        }\n        return JSON.parse(fileContent);\n    } catch (error) {\n        // It's okay if the file doesn't exist, it just means no data has been uploaded yet.\n        if (error instanceof Error && (error as NodeJS.ErrnoException).code === 'ENOENT') {\n            try {\n                // If the file doesn't exist, create it with empty data\n                const emptyContent = (fileKey === 'hackathons' || fileKey === 'industry-events') ? '[]' : JSON.stringify({ headers: [], rows: [] }, null, 2);\n                await fs.writeFile(dataFilePath(`${fileKey}.json`), emptyContent, 'utf-8');\n\n                if (fileKey === 'hackathons' || fileKey === 'industry-events') {\n                    return { headers: [], rows: [] };\n                }\n                return { headers: [], rows: [] };\n            } catch (writeError) {\n                console.error(`Could not create ${fileKey}.json:`, writeError);\n                return null;\n            }\n        }\n        console.error(`Could not read or parse ${fileKey}.json:`, error);\n        return null;\n    }\n}\n\n\nexport async function writeExcelData(fileKey: string, data: any) {\n    try {\n        // A bit of a hack for hackathons data\n        const dataToWrite = (fileKey === 'hackathons' || fileKey === 'industry-events') ? data : data;\n        await fs.writeFile(dataFilePath(`${fileKey}.json`), JSON.stringify(dataToWrite, null, 2), 'utf-8');\n    } catch (error) {\n        console.error(`Could not write to ${fileKey}.json:`, error);\n        throw new Error(`Failed to save ${fileKey} data.`);\n    }\n}\n\nexport async function readMonthlyData(dir: string, month?: string | null): Promise<MonthlyExcelData | null> {\n    const dirPath = monthlyDataDirectoryPath(dir);\n    try {\n        await fs.mkdir(dirPath, { recursive: true });\n        const files = await fs.readdir(dirPath);\n        \n        if (month) {\n            const fileName = `${month}.json`;\n            if (files.includes(fileName)) {\n                const fileContent = await fs.readFile(path.join(dirPath, fileName), 'utf-8');\n                if (fileContent.trim() === '') return { [month]: { headers: [], rows: [] } };\n                return { [month]: JSON.parse(fileContent) };\n            }\n            return null;\n        }\n\n        const allData: MonthlyExcelData = {};\n        for (const file of files) {\n            if (path.extname(file) === '.json') {\n                const monthKey = path.basename(file, '.json');\n                const fileContent = await fs.readFile(path.join(dirPath, file), 'utf-8');\n                if (fileContent.trim() === '') {\n                    allData[monthKey] = { headers: [], rows: [] };\n                } else {\n                    allData[monthKey] = JSON.parse(fileContent);\n                }\n            }\n        }\n        return allData;\n\n    } catch (error) {\n        console.error(`Could not read from directory ${dir}:`, error);\n        return null;\n    }\n}\n\nexport async function writeMonthlyData(dir: string, month: string, data: ExcelData) {\n    const dirPath = monthlyDataDirectoryPath(dir);\n    try {\n        await fs.mkdir(dirPath, { recursive: true });\n        const filePath = path.join(dirPath, `${month}.json`);\n        await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n    } catch (error) {\n        console.error(`Could not write to ${dir}/${month}.json:`, error);\n        throw new Error(`Failed to save ${dir} data for ${month}.`);\n    }\n}\n\n// Value Map Data Functions\nexport async function getValueMapData(): Promise<ValueMapData> {\n    const filePath = dataFilePath('value-map.json');\n    try {\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(fileContent) as ValueMapData;\n    } catch (error) {\n        if (error instanceof Error && (error as NodeJS.ErrnoException).code === 'ENOENT') {\n            const defaultData: ValueMapData = {\n                outcomes: [],\n                drivers: [],\n                levers: [],\n            };\n            await writeValueMapData(defaultData);\n            return defaultData;\n        }\n        console.error(\"Could not read or parse value-map.json:\", error);\n        throw new Error(\"Failed to read Value Map data.\");\n    }\n}\n\nexport async function writeValueMapData(data: ValueMapData) {\n    try {\n        const filePath = dataFilePath('value-map.json');\n        await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n    } catch (error) {\n        console.error(\"Could not write to value-map.json:\", error);\n        throw new Error(\"Failed to save Value Map data.\");\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 454, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/data/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { \n    getPillars, \n    writeData, \n    readExcelData, \n    writeExcelData, \n    readMonthlyData, \n    writeMonthlyData,\n    getValueMapData,\n    writeValueMapData,\n} from '@/lib/data';\nimport type { Pillar } from '@/types';\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const fileKey = searchParams.get('key');\n  const month = searchParams.get('month'); // e.g., '2024-08'\n\n  if (fileKey === 'value-map') {\n      try {\n          const data = await getValueMapData();\n          return NextResponse.json(data);\n      } catch (error) {\n          return new NextResponse('Internal Server Error', { status: 500 });\n      }\n  }\n\n  if (fileKey === 'jira-assistant-adoption') {\n      try {\n          const data = await readMonthlyData(fileKey, month);\n          return NextResponse.json(data);\n      } catch (error) {\n          return new NextResponse('Internal Server Error', { status: 500 });\n      }\n  }\n\n  if (fileKey) {\n     try {\n        if (fileKey === 'hackathons') {\n            const data = await readExcelData('hackathons');\n            // hackathons are not in ExcelData format, they are just an array in the `rows` property\n            return NextResponse.json(data?.rows ?? []); \n        }\n        if (fileKey === 'industry-events') {\n            const data = await readExcelData('industry-events');\n            return NextResponse.json(data?.rows ?? []);\n        }\n        if (fileKey === 'squad-onboarding') {\n            const data = await readExcelData('squad-onboarding');\n            return NextResponse.json(data);\n        }\n         if (fileKey === 'arc-trainings') {\n            const data = await readExcelData('arc-trainings');\n            return NextResponse.json(data);\n        }\n        if (fileKey === 'app-sherpas') {\n            const data = await readExcelData('app-sherpas');\n            return NextResponse.json(data);\n        }\n        if (fileKey === 'regression-testing-automation' || fileKey === 'junit-adoption' || fileKey === 'maintenance-screens' || fileKey === 'api-performance') {\n            const data = await readExcelData(fileKey);\n            return NextResponse.json(data);\n        }\n        const data = await readExcelData(fileKey);\n        if (data) {\n            return NextResponse.json(data);\n        } else {\n            return new NextResponse('Not Found', { status: 404 });\n        }\n     } catch (error) {\n        return new NextResponse('Internal Server Error', { status: 500 });\n     }\n  } else {\n    try {\n        const pillars = await getPillars();\n        return NextResponse.json(pillars);\n    } catch (error) {\n        return new NextResponse('Internal Server Error', { status: 500 });\n    }\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n\n    if (body.pillars) {\n        await writeData(body.pillars);\n    }\n    if (body.valueMap) {\n        await writeValueMapData(body.valueMap);\n    }\n    if (body.excelData) {\n        for (const key in body.excelData) {\n            if (Object.prototype.hasOwnProperty.call(body.excelData, key)) {\n                 if (body.excelData[key]) {\n                    // special handling for hackathons since they are just an array\n                    if (key === 'hackathons' || key === 'industry-events') {\n                      await writeExcelData(key, body.excelData[key]);\n                    } else if (key.startsWith('jira-assistant-adoption')) {\n                        const [, month] = key.split(':');\n                        if (month) {\n                            await writeMonthlyData('jira-assistant-adoption', month, body.excelData[key]);\n                        }\n                    }\n                    else {\n                      await writeExcelData(key, body.excelData[key]);\n                    }\n                 }\n            }\n        }\n    }\n\n    return new NextResponse('Data saved successfully', { status: 200 });\n  } catch (error) {\n    console.error('Save Error:', error);\n    return new NextResponse('Internal Server Error', { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}